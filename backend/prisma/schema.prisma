// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  dryRun   = false
  separateRelationFields  = true
  output   = "../src/types/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String?  @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  telegram_id       String? @unique
  verification_code String?
  is_verified       Boolean @default(false)

  contacts   Contact[]
  transactions Transaction[]

  isContactFor Contact[] @relation(name: "refUser")
}

model Currency {
  id        Int      @id @default(autoincrement())
  name      String  @unique
  symbol    String
  createdAt DateTime @default(now())

  balances     Balance[]
  transactions Transaction[]
}

model Balance {
  currency_id Int
  currency    Currency @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  amount      Float    @default(0)

  contact_id   Int
  contact    Contact   @relation(fields: [contact_id], references: [id], onDelete: Cascade)

  @@id([currency_id, contact_id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  contact_id     Int?
  contact        Contact?     @relation(fields: [contact_id], references: [id], onDelete: Cascade)
  currency_id Int
  currency    Currency @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  amount      Float
  note        String?
  draftId     String? @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model Contact {
  id          Int      @id @default(autoincrement())
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name       String?
  ref_user_id  Int?
  ref_user    User?   @relation( name: "refUser", fields: [ref_user_id], references: [id])

  Transaction Transaction[]
  Balance Balance[]
}
